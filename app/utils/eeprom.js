import Immutable from 'immutable';

const defaultEEPROM = [
  1, 1, 350, 34, 0, 2, 1, 1, 350, 4, 0, 2, 1, 1, 350, 14, 0, 2, 1, 1, 350, 24, 0,
  2, 1, 1, 350, 44, 1, 2, 1, 1, 0, 230, 0, 0, 1, 1, 70, 230, 0, 0, 1, 1, 200, 230,
  0, 0, 1, 1, 280, 230, 0, 0, 1, 2, 0, 230, 0, 0, 1, 2, 70, 230, 0, 0, 1, 2, 200,
  230, 0, 0, 1, 2, 280, 230, 0, 0, 1, 1, 350, 220, 0, 2, 1, 2, 5, 10, 0, 0, 1, 1,
  350, 1, 0, 1, 2, 5, 25, 0, 0, 1, 1, 10, 0, 0, 1, 1, 1, 295, 202, 1, 1, 70, 14,
  0, 0, 1, 1, 70, 24, 0, 0, 1, 2, 15, 1, 1, 30, 35, 20, 25, 25, 1, 1, 0, 1, 2, 0,
  2, 1, 6, 1200, 1, 7, 1200, 180, 25, 2, 1, 1, 1, 20, 0, 2, 0, 100, 0, 10, 0, 1000,
  1, 1, 5, 220, 0, 1, 1, 70, 220, 0, 0, 0, 255, 0, 0, 1, 2, 10, 50, 0, 0, 180, 133,
  1, 0, 180, 133, 1, 0, 40, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
];

function toEnabled(byte) {
  return byte > 0 ? 1 : 0;
}

function fromSign(byte, value) {
  return byte > 0 ? value : -value;
}

function toSign(value) {
  return value > 0 ? 1 : 0;
}

function fromFraction(byte, value) {
  return (value || 0) + (byte / 10);
}

function toFraction(value) {
  return Math.floor((value - Math.floor(value)) * 10);
}

function fromReal(byte, value) {
  return (value || 0) + byte;
}

function toReal(value) {
  return Math.floor(value);
}

const eepromMapping = [
  { path: ['armState', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['armState', 'visibleOn'] },
  { path: ['armState', 'positionX'] },
  { path: ['armState', 'positionY'] },
  { path: ['armState', 'fontSize'] },
  { path: ['armState', 'hAlignment'] },
  { path: ['batteryVoltage', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['batteryVoltage', 'visibleOn'] },
  { path: ['batteryVoltage', 'positionX'] },
  { path: ['batteryVoltage', 'positionY'] },
  { path: ['batteryVoltage', 'fontSize'] },
  { path: ['batteryVoltage', 'hAlignment'] },
  { path: ['batteryCurrent', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['batteryCurrent', 'visibleOn'] },
  { path: ['batteryCurrent', 'positionX'] },
  { path: ['batteryCurrent', 'positionY'] },
  { path: ['batteryCurrent', 'fontSize'] },
  { path: ['batteryCurrent', 'hAlignment'] },
  { path: ['batteryRemaining', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['batteryRemaining', 'visibleOn'] },
  { path: ['batteryRemaining', 'positionX'] },
  { path: ['batteryRemaining', 'positionY'] },
  { path: ['batteryRemaining', 'fontSize'] },
  { path: ['batteryRemaining', 'hAlignment'] },
  { path: ['flightMode', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['flightMode', 'visibleOn'] },
  { path: ['flightMode', 'positionX'] },
  { path: ['flightMode', 'positionY'] },
  { path: ['flightMode', 'fontSize'] },
  { path: ['flightMode', 'hAlignment'] },
  { path: ['gpsStatus', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['gpsStatus', 'visibleOn'] },
  { path: ['gpsStatus', 'positionX'] },
  { path: ['gpsStatus', 'positionY'] },
  { path: ['gpsStatus', 'fontSize'] },
  { path: ['gpsStatus', 'hAlignment'] },
  { path: ['gpsHdop', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['gpsHdop', 'visibleOn'] },
  { path: ['gpsHdop', 'positionX'] },
  { path: ['gpsHdop', 'positionY'] },
  { path: ['gpsHdop', 'fontSize'] },
  { path: ['gpsHdop', 'hAlignment'] },
  { path: ['gpsLatitude', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['gpsLatitude', 'visibleOn'] },
  { path: ['gpsLatitude', 'positionX'] },
  { path: ['gpsLatitude', 'positionY'] },
  { path: ['gpsLatitude', 'fontSize'] },
  { path: ['gpsLatitude', 'hAlignment'] },
  { path: ['gpsLongitude', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['gpsLongitude', 'visibleOn'] },
  { path: ['gpsLongitude', 'positionX'] },
  { path: ['gpsLongitude', 'positionY'] },
  { path: ['gpsLongitude', 'fontSize'] },
  { path: ['gpsLongitude', 'hAlignment'] },
  { path: ['gps2Status', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['gps2Status', 'visibleOn'] },
  { path: ['gps2Status', 'positionX'] },
  { path: ['gps2Status', 'positionY'] },
  { path: ['gps2Status', 'fontSize'] },
  { path: ['gps2Status', 'hAlignment'] },
  { path: ['gps2Hdop', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['gps2Hdop', 'visibleOn'] },
  { path: ['gps2Hdop', 'positionX'] },
  { path: ['gps2Hdop', 'positionY'] },
  { path: ['gps2Hdop', 'fontSize'] },
  { path: ['gps2Hdop', 'hAlignment'] },
  { path: ['gps2Latitude', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['gps2Latitude', 'visibleOn'] },
  { path: ['gps2Latitude', 'positionX'] },
  { path: ['gps2Latitude', 'positionY'] },
  { path: ['gps2Latitude', 'fontSize'] },
  { path: ['gps2Latitude', 'hAlignment'] },
  { path: ['gps2Longitude', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['gps2Longitude', 'visibleOn'] },
  { path: ['gps2Longitude', 'positionX'] },
  { path: ['gps2Longitude', 'positionY'] },
  { path: ['gps2Longitude', 'fontSize'] },
  { path: ['gps2Longitude', 'hAlignment'] },
  { path: ['time', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['time', 'visibleOn'] },
  { path: ['time', 'positionX'] },
  { path: ['time', 'positionY'] },
  { path: ['time', 'fontSize'] },
  { path: ['time', 'hAlignment'] },
  { path: ['absoluteAltitude', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['absoluteAltitude', 'visibleOn'] },
  { path: ['absoluteAltitude', 'positionX'] },
  { path: ['absoluteAltitude', 'positionY'] },
  { path: ['absoluteAltitude', 'fontSize'] },
  { path: ['absoluteAltitude', 'hAlignment'] },
  { path: ['altitudeScale', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['altitudeScale', 'visibleOn'] },
  { path: ['altitudeScale', 'positionX'] },
  { path: ['altitudeScale', 'alignment'] },
  { path: ['altitudeScale', 'source'] },
  { path: ['speedGround', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['speedGround', 'visibleOn'] },
  { path: ['speedGround', 'positionX'] },
  { path: ['speedGround', 'positionY'] },
  { path: ['speedGround', 'fontSize'] },
  { path: ['speedGround', 'hAlignment'] },
  { path: ['speedScale', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['speedScale', 'visibleOn'] },
  { path: ['speedScale', 'positionX'] },
  { path: ['speedScale', 'alignment'] },
  { path: ['speedScale', 'source'] },
  { path: ['throttle', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['throttle', 'visibleOn'] },
  { path: ['throttle', 'scaleEnabled'] },
  { path: ['throttle', 'positionX'] },
  { path: ['throttle', 'positionY'] },
  { path: ['homeDistance', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['homeDistance', 'visibleOn'] },
  { path: ['homeDistance', 'positionX'] },
  { path: ['homeDistance', 'positionY'] },
  { path: ['homeDistance', 'fontSize'] },
  { path: ['homeDistance', 'hAlignment'] },
  { path: ['wpDistance', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['wpDistance', 'visibleOn'] },
  { path: ['wpDistance', 'positionX'] },
  { path: ['wpDistance', 'positionY'] },
  { path: ['wpDistance', 'fontSize'] },
  { path: ['wpDistance', 'hAlignment'] },
  { path: ['compass', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['compass', 'visibleOn'] },
  { path: ['compass', 'positionY'] },
  { path: ['radar', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['radar', 'visibleOn'] },
  { path: ['radar', 'positionX'] },
  { path: ['radar', 'positionY'] },
  { path: ['radar', 'radius'] },
  { path: ['radar', 'homeRadius'] },
  { path: ['radar', 'wpRadius'] },
  { path: ['attitudeMP', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['attitudeMP', 'visibleOn'] },
  { path: ['attitudeMP', 'mode'] }, // wtf?
  { path: ['attitude3D', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['attitude3D', 'visibleOn'] },
  { path: ['video', 'units'] },
  { path: ['video', 'maxPanels'] },
  { path: ['pwmVideo', 'enabled'] },
  { path: ['pwmVideo', 'channel'] },
  { path: ['pwmVideo', 'value'] },
  { path: ['pwmPanel', 'enabled'] },
  { path: ['pwmPanel', 'channel'] },
  { path: ['pwmPanel', 'value'] },
  { path: ['alarm', 'positionX'] },
  { path: ['alarm', 'positionY'] },
  { path: ['alarm', 'fontSize'] },
  { path: ['alarm', 'hAlignment'] },
  { path: ['alarm', 'gpsStatusEnabled'] },
  { path: ['alarm', 'lowBatteryEnabled'] },
  { path: ['alarm', 'lowBatteryValue'] },
  { path: ['alarm', 'underSpeedEnabled'] },
  { path: ['alarm', 'underSpeedValue'] },
  { path: ['alarm', 'overSpeedEnabled'] },
  { path: ['alarm', 'overSpeedValue'] },
  { path: ['alarm', 'underAltEnabled'] },
  { path: ['alarm', 'underAltValue'] },
  { path: ['alarm', 'overAltEnabled'] },
  { path: ['alarm', 'overAltValue'] },
  { path: ['climbRate', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['climbRate', 'visibleOn'] },
  { path: ['climbRate', 'positionX'] },
  { path: ['climbRate', 'positionY'] },
  { path: ['climbRate', 'fontSize'] },
  { path: ['rssi', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['rssi', 'visibleOn'] },
  { path: ['rssi', 'positionX'] },
  { path: ['rssi', 'positionY'] },
  { path: ['rssi', 'fontSize'] },
  { path: ['rssi', 'hAlignment'] },
  { path: ['rssi', 'min'] },
  { path: ['rssi', 'max'] },
  { path: ['rssi', 'raw'] },
  { path: ['fcType'] },
  { path: ['wind', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['wind', 'visibleOn'] },
  { path: ['wind', 'positionX'] },
  { path: ['wind', 'positionY'] },
  { path: ['time', 'type'] },
  { path: ['throttle', 'scaleType'] },
  { path: ['attitudeMP', 'positionX'] },
  { path: ['attitudeMP', 'positionY'] },
  { path: ['attitudeMP', 'scale'], convertToParameters: fromReal, convertFromParameters: toReal },
  { path: ['attitudeMP', 'scale'], convertToParameters: fromFraction, convertFromParameters: toFraction },
  { path: ['attitude3D', 'positionX'] },
  { path: ['attitude3D', 'positionY'] },
  { path: ['attitude3D', 'scale'], convertToParameters: fromReal, convertFromParameters: toReal },
  { path: ['attitude3D', 'scale'], convertToParameters: fromFraction, convertFromParameters: toFraction },
  { path: ['attitude3D', 'mapRadius'] },
  { path: ['video', 'offsetY'] },
  { path: ['video', 'offsetX'] },
  { path: ['firmware', 'version'] },
  { path: ['video', 'videoMode'] },
  { path: ['speedScale', 'positionY'] },
  { path: ['altitudeScale', 'positionY'] },
  { path: ['batteryConsumed', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['batteryConsumed', 'visibleOn'] },
  { path: ['batteryConsumed', 'positionX'] },
  { path: ['batteryConsumed', 'positionY'] },
  { path: ['batteryConsumed', 'fontSize'] },
  { path: ['batteryConsumed', 'hAlignment'] },
  { path: ['totalTrip', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['totalTrip', 'visibleOn'] },
  { path: ['totalTrip', 'positionX'] },
  { path: ['totalTrip', 'positionY'] },
  { path: ['totalTrip', 'fontSize'] },
  { path: ['totalTrip', 'hAlignment'] },
  { path: ['rssi', 'type'] },
  { path: ['map', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['map', 'visibleOn'] },
  { path: ['map', 'radius'] },
  { path: ['map', 'fontSize'] },
  { path: ['map', 'hAlignment'] },
  { path: ['map', 'vAlignment'] },
  { path: ['relativeAltitude', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['relativeAltitude', 'visibleOn'] },
  { path: ['relativeAltitude', 'positionX'] },
  { path: ['relativeAltitude', 'positionY'] },
  { path: ['relativeAltitude', 'fontSize'] },
  { path: ['relativeAltitude', 'hAlignment'] },
  { path: ['altitudeScale', 'type'] },
  { path: ['speedAir', 'visibleOn'], convertFromParameters: toEnabled },
  { path: ['speedAir', 'visibleOn'] },
  { path: ['speedAir', 'positionX'] },
  { path: ['speedAir', 'positionY'] },
  { path: ['speedAir', 'fontSize'] },
  { path: ['speedAir', 'hAlignment'] },
  { path: ['speedScale', 'type'] },
  { path: ['video', 'offsetX'], convertToParameters: fromSign, convertFromParameters: toSign },
  { path: ['serial', 'uartBaudRate'] },
];

const skeletonParameters = {
  'alarm': {},
  'altitudeAbsolute': {},
  'relativeAltitude': {},
  'altitudeScale': {},
  'armState': {},
  'attitude3D': {},
  'attitudeMP': {},
  'batteryConsumed': {},
  'batteryCurrent': {},
  'batteryRemaining': {},
  'batteryVoltage': {},
  'climbRate': {},
  'compass': {},
  'firmware': {},
  'flightMode': {},
  'gps2Hdop': {},
  'gps2Latitude': {},
  'gps2Longitude': {},
  'gps2Status': {},
  'gpsHdop': {},
  'gpsLatitude': {},
  'gpsLongitude': {},
  'gpsStatus': {},
  'homeDistance': {},
  'map': {},
  'pwmPanel': {},
  'pwmVideo': {},
  'radar': {},
  'rssi': {},
  'serial': {},
  'speedAir': {},
  'speedGround': {},
  'speedScale': {},
  'throttle': {},
  'time': {},
  'totalTrip': {},
  'video': {},
  'wind': {},
  'wpDistance': {},
};

export function toParameters(eepromData) {
  return eepromData.reduce((state, byte, index) => {
    const mapping = eepromMapping[index];
    if (!mapping) {
      return state;
    }
    const converter = mapping.convertToParameters ? mapping.convertToParameters : (x) => x;
    return state.updateIn(mapping.path, (value) => converter(byte, value));
  }, Immutable.fromJS(skeletonParameters));
}

export function fromParameters(parameters) {
  return eepromMapping.map((mapping) => {
    const converter = mapping.convertFromParameters ? mapping.convertFromParameters : (x) => x;
    return converter(parameters.getIn(mapping.path));
  });
}

export default {
  defaultEEPROM,
  fromParameters,
  toParameters,
};
